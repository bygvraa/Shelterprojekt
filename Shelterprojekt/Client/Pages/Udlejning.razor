@page "/"
@using Shelterprojekt.Shared.Models
@using Shelterprojekt.Shared.Validation
@inject HttpClient Http

<h1>Shelterudlejning</h1>
<h5>Liste over tilgængelige sheltere</h5>
<br />

@if (ShelterList == null)
{
    <p><em>Indlæser shelters, vent venligst...</em></p>
    <br />

}
else
{
<div class="col-md-8" style="padding-left: initial; padding-right: initial">

    <table style="width: 80%; height: 100px; margin-bottom: 6px; display: table;">
        <tbody>
            <tr>
                <td>
                    @foreach (var Shelter in ShelterList)
                    {
                        <table class="shelter-card">
                            <tbody class="shelter-card-tbody">
                                <tr class="shelter-card-row">
                                    <td class="shelter-card-cell shelter-card-cell-tip">
                                        <i class="oi oi-home"></i>
                                    </td>
                                    <td class="shelter-card-cell" valign="top">
                                        <div class="shelter-card-cell-title">
                                            @Shelter.Properties.Navn
                                        </div>

                                        <div style="height:40px; display: table-cell; color: black;">
                                            <div style="display: block;">
                                                @Shelter.Properties.Beskrivelse
                                            </div>
                                        </div>

                                        <div align="right" valign="middle" style="padding-right: 10px;">
                                            <button class="btn shelter-btn-info" onclick=" window.open('https://www.google.com/maps?q=@Shelter.Geometry.Koordinater.Lat,@Shelter.Geometry.Koordinater.Long', '_blank')">
                                                Maps
                                            </button>

                                            <button class="btn shelter-btn-info" @onclick="@(async () => await AddBooking(Shelter.Id, Shelter.Properties.Navn))">
                                                Book
                                            </button>
                                        </div>

                                        <div style="display: inline-table">
                                            <div id="pladser" style="display: table-cell; padding-right: 20px">
                                                Antal pladser: @Shelter.Properties.AntalPl
                                            </div>
                                            <div id="handicap" style="display:table-cell">
                                                @Shelter.Properties.Handicap
                                            </div>

                                        </div>


                                    </td>


                                </tr>
                            </tbody>
                        </table>
                    }
                </td>
            </tr>
        </tbody>
    </table>
</div>

// Trykkes der på "book shelter"-knappen, ændres "isAdd" til true, og følgende kode køres:
    if (isAdd)
    {
        <EditForm  EditContext="@editContext" OnValidSubmit="@(async () => await SaveBooking())">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content" style="background-color: #f7f7f7">
                        <div class="modal-header" style="border: none">
                            <h3 class="modal-title">@ModalTitle</h3>
                            <button type="button" class="close" @onclick="@this.CloseModal">
                                <span aria-hidden="true" style="font-family: monospace">
                                    x
                                </span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <form>
                                <div class="form-group">


                                    <label for="brugernavn" style="width: 300px">
                                        Brugernavn
                                    </label>
                                            <InputText @bind-Value="@booking.Brugernavn" />
                                        <ValidationMessage For="@(() => booking.Brugernavn)" />


                                    <label for="dato" style="width: 300px; padding-top: 20px">
                                        Dato
                                    </label>
                                    <input type="date" min="@dateDisable"
                                           @bind-value="@booking.Dato"
                                           @onmouseout="(async () => await CheckBooking(booking.ShelterId, booking.Dato))"
                                           @onmouseover="@(() =>  PrintTime(booking.Dato))"
                                           @onblur="(async () => await CheckBooking(booking.ShelterId, booking.Dato))" />
                                        <ValidationMessage For="@(() => booking.Dato)" />

                                </div>
                            </form>
                        </div>

                        <div class="modal-footer" style="border: none">
                            <div style="@messageStyles">
                                @message
                            </div>
                            <button type="submit" class="btn btn-primary" id="submitBtn" disabled="@formInvalid">Submit</button>
                        </div>

                    </div>
                </div>
            </div>
        </EditForm>

    }
}

@code {

    // Variabler --------------------------------------------
    //

    // Variabler, der bruges af kalenderen
    string dateDisable = DateTime.Now.ToString("yyyy-MM-dd");
    string dateValue;


    // Variabler til at indlæse booking- og shelter-listerne
    protected List<Booking> BookingList;
    protected List<Shelter> ShelterList;

    protected Booking booking = new() { Dato = DateTime.Now };


    // Variabler, der bruges af data/form validation
    private EditContext editContext;
    private ValidationMessageStore messageStore;
    private bool formInvalid = true;

    private string message;
    private string messageStyles = "visibility:hidden";


    // Variabler, der bruges af modal (pop-up vinduet)
    protected string ModalTitle { get; set; }
    protected Boolean isAdd = false;



    // Metoder ----------------------------------------------
    //
    void PrintTime(DateTime date)
    {
        Console.WriteLine(DateTime.Now);
        Console.WriteLine(date);
    }

    protected async Task GetBookings()
    {
        BookingList = await Http.GetJsonAsync<List<Booking>>("api/booking/index");
    }
    protected async Task GetShelters()
    {
        ShelterList = await Http.GetJsonAsync<List<Shelter>>("api/shelter/index");
    }


    protected async Task AddBooking(string id, string navn)
    {
        editContext = new(booking = new() { Dato = DateTime.Now });
        editContext.SetFieldCssClassProvider(new CustomFieldClassProvider());
        messageStore = new(editContext);


        this.ModalTitle = "Book " + navn;
        this.isAdd = true;
        await GetBookings().ConfigureAwait(false);

        this.@booking.ShelterId = id;
        this.@booking.ShelterNavn = navn;

    }

    protected async Task SaveBooking()
    {
        if (booking.Id != null)
        {
            await Http.SendJsonAsync(HttpMethod.Put, "api/booking/edit", booking);
        }
        else
        {
            await Http.SendJsonAsync(HttpMethod.Post, "api/booking/create", booking);
        }
        await GetBookings();

        formInvalid = true;

        messageStyles = "color:green";
        message = "Booking af shelter er nu gennemført";

    }

    protected async Task CheckBooking(string id, DateTime date)
    {
        Console.WriteLine(date);
        string dateString = date.ToLongDateString();

        messageStore.Clear();
        CloseMessage();

        if ( await Http.GetJsonAsync<bool>("api/booking/check/" + id + "/" + dateString) == true)
        {
            formInvalid = true;
            messageStore.Add(() => booking.Dato, "Booking er ikke mulig på denne dato, vælg venligst en anden");
        }
        else
        {
            formInvalid = false;
            dateValue = date.ToString("yyyy-MM-dd");

        }


    }


    protected void CloseModal()
    {
        this.isAdd = false;
        CloseMessage();
    }

    protected void CloseMessage()
    {
        messageStyles = "visibility:hidden";
    }

    protected override async Task OnInitializedAsync()
    {
        await GetBookings();
        await GetShelters();

    }


}
